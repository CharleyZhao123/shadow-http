'''
用于加密的模块。暂时只支持aes-256-cfb。
'''
# AES的总体加密流程如下：
# 1.把明文按照128bit拆分成若干个明文块。
# 2.按照选择的填充方式来填充最后一个明文块。
# 3.每一个明文块利用AES加密器和密钥，加密成密文块。
# 4.拼接所有的密文块，成为最终的密文结果。

# 依赖于PyCryptodome库

import base64
import hashlib
import os

from Crypto.Cipher import AES

# 目前仅支持aes-256-cfb
# 在aes-256-cfb中，我们选择32位密钥长度，16位初始向量
KEYLEN = 32
IVLEN = 16

ENCRYPT = 1
DECRYPT = 0

# 密钥缓存
cached_keys = {}


class aes_256_cfb_Cyptor:
    '''
    AES-256-cfb加密类。
    '''
    KEYLEN = 32
    IVLEN = 16

    def __init__(self, passwd):
        self._ciptor = None
        self._deciptor = None
        self._passwd = passwd
        self._key, _ = EVP_BytesToKey(self._passwd, self.KEYLEN, self.IVLEN)

    def cipher(self, data):
        if not self._ciptor:
            iv = os.urandom(self.IVLEN)
            self._ciptor = AES.new(self._key, AES.MODE_CFB, iv)
            
            encrypted = self._ciptor.encrypt(data)
            
            return iv + encrypted
        else:
            return self._ciptor.encrypt(data)

    def decipher(self, data):
        if not self._deciptor:
            iv = data[:IVLEN]
            data = data[IVLEN:]
            deciptor = AES.new(self._key, AES.MODE_CFB, iv=iv)
            text = deciptor.decrypt(data)
            self._deciptor = deciptor
        else:
            text = self._deciptor.decrypt(data)
        return text


def EVP_BytesToKey(password, key_len, iv_len):
    '''
    使用OpenSSL中的同名函数，通过不定长的密码生成定长的密钥和初始向量。
    '''
    cached_key = '%s-%d-%d' % (password, key_len, iv_len)
    r = cached_keys.get(cached_key, None)
    if r:
        return r
    m = []
    i = 0
    while len(b''.join(m)) < (key_len + iv_len):
        md5 = hashlib.md5()
        data = password
        if i > 0:
            data = m[i - 1] + password
        md5.update(data)
        m.append(md5.digest())
        i += 1
    ms = b''.join(m)
    key = ms[:key_len]
    iv = ms[key_len:key_len + iv_len]
    cached_keys[cached_key] = (key, iv)
    return key, iv

def test_enc():
    cpt = aes_256_cfb_Cyptor(b'123456')
    cdata = cpt.cipher(b"Hello, world\n")
    cdata = cdata + cpt.cipher(b"Thank you!")
    assert cpt.decipher(cdata) == b'Hello, world\nThank you!'

def test_conn():
    cpt = aes_256_cfb_Cyptor(b'Glgj3417inhfBQZ')
    raw = b"\xde\x97\xed\x26\xd6\x69\xe7\xac\xad\xf1\xf4\x16\xbd\x55" \
b"\x94\x31\xb6\x37\xe3\xe6\x96\x73"
    raw2 = b"\xdf\x8d\xe6\xad\xb4\xf7\xbf\xfb" \
b"\x63\xaf\x42"

    x1 = cpt.decipher(raw)
    x2 = cpt.decipher(raw2)
    print(x1+x2)

def test_aa():
    cpt = aes_256_cfb_Cyptor(b'Glgj3417inhfBQZ')
    raw = b"\x2b\x6f\x52\xb9\xdb\x2d\x29\xf9\x99\xa1\x18\x5b\x16\x72\x22\xbb" \
b"\x92\x7a\xd0\x13\x01\xca\xd6\xa6\xc4\x7f\x5d\x80\x54\x22\xa5\x24" \
b"\xde\x97\xab\x34\x3b\x36\xa9\x7e\x76\x3d\x94\xd1\x15\xd8\x51\xdb" \
b"\xff\xda\xcd\x74\xb5\x80\x47\x16\x2a\x72\xfa\x7a\x9c\x42\xb6\x15" \
b"\x07\xae\xed\x19\xe7\xb2\x01\x38\x7e\x8b\x8e\x6b\xc0\x6a\x63\x52" \
b"\x18\x7e\x84\xdf\x36\x58\xd0\xff\xa1\xd3\xd1\xbc\xd9\x9a\xbb\x07" \
b"\xa8\x63\x5b\x4e\x1e\x1c\x9f\x75\x39\x44\x05\x7d\x31\xeb\x94\xf0" \
b"\xdf\xc1\x46\x5a\x60\xac\xb0\x70\x37\xa7\x80\x5a\x8c\xb6\x78\x79" \
b"\x80\x95\x3b\xb3\xe9\xff\xfb\x38\xcf\xef\xe2\x8b\x83\x60\xff\x24" \
b"\xcd\xb1\x16\x6a\x5f\x2c\x9b\xac\x27\x4a\x91\x9f\x39\xbb\x6e\x3b" \
b"\x23\xa7\xed\xf9\x30\xd0\xec\xbf\x30\x8b\xe1\xc9\xa3\x8e\x2d\x11" \
b"\x7e\xa8\x2b\xda\x03\x1c\x9d\x79\x61\x16\xdb\xd8\xa6\x97\xa3\x18" \
b"\x05\x8b\xb8\x13\x11\x8d\x9b\xef\x0b\xfa\xe1\x5a\xe4\x63\x5c\xf7" \
b"\xe1\xf5\xc8\x77\x00\x87\xc7\xb3\xb8\xac\x40\x08\xd8\xbb\x8e\x80" \
b"\xe7\x8d\x29\x49\x56\x40\xf5\xd7\x77\x56\x7d\x0c\x7f\xfa\xfb\x33" \
b"\xdb\xe5\x3b\x79\x2d\x1c\xea\xdc\x6a\x32\x1b\x51\xef\x96\xeb\xb1" \
b"\x85\xbb\x07\x81\x4e\xac\x61\x51\x34\xb7\x4d\x4b\xbd\xfa\x45\x3b" \
b"\x37\xc0\x1f\xd5\x2f\x70\x12\x04\x21\x02\x7f\xe5\xf1\xc7\xd3\xdf" \
b"\x37\x7e\xeb\xf1\x70\xfa\xe9\xb8\x0e\xd5\xeb\x26\x27\x5c\x72\x59" \
b"\xbd\xb6\x82\xe4\x6a\x12\x8e\x2f\x3a\x87\xc1\xb7\xfc\x45\x51\x24" \
b"\x0e\x38\x8f\x91\x3d\xf8\x0a\xba\x2b\xc8\x12\x18\xaf\x8b\x9d\x1f" \
b"\x9a\xaa\x55\x44\x7f\x2a\xf3\xc9\x20\x9b\xf5\xbc\x3a\x9e\x88\x63" \
b"\xbd\x6d\x04\x76\x33\x2d\x2e\xdc\x5d\x71\x1f\x8a\x3e\x6b\x6d\x34" \
b"\xdb\x4c\xc5\xc4\xea\xe0\x0e\x49\x81\x1d\xfe\xb2\xa1\xe3\x0a\xd5" \
b"\x64\x11\xda\x7b\x5a\x05\x4d\xa5\x73\xf3\x38\xb3\xff\x9d\x6d\x1f" \
b"\x89\x93\xbf\x09\x3c\x6a\xa3\x47\xc7\x5e\x57\x91\x94\x48\xc0\x18" \
b"\x42\xb5\x2b\xfd\x8f\x41\xe4\x5a\xac\x84\xe1\x80\xf8\xce\x81\xb3" \
b"\xd9\xb8\xc5\x23\x43\xf2\x74\xce\x4a\x2d\xc0\xcd\xaa\x6e\xc3\x1e" \
b"\x86\x56\x00\xb0\x11\xa7\x81\x4f\x7f\x02\xf1\x61\xa5\xdd\x21\xe4" \
b"\xae\xa2\x4a\x51\x8b\x03\x4c\xdc\x58\xd1\x69\x14\x41\xb7\xca\xd2" \
b"\x57\x2f\xeb\xa5\x9a\x9c\x67\x3a\x78\xe1\xd0\x76\x73\xe5\xed\xe6" \
b"\x33\xac\x5f\xe1\x77\xab\x60\x36\xfb\x31\x6b\xc2\xf0\x00\xf0\x77" \
b"\xfb\x36\x0e\x5b\xae\x63\xb5\xf2\x0b\xc7\x86\x36\x9e\x9e\xbe\x59" \
b"\x82\x63\x3b\xb0\xd2\x86\x15\xb2\xda\xa7\xa7\x74\xce\xb3\xd6\xdc" \
b"\x7c\x21\x01\x6f\x16\x1a\xa8\x87"


    x1 = cpt.decipher(raw)
    print(x1)

if __name__ == "__main__":
    # test_enc()
    # test_conn()
    test_aa()
